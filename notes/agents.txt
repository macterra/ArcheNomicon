An xidb agent has a 1-to-1 correspondence with a legal agent, that is a person under the law

An xidb agent will be distinguished by a standard set of attributes, e.g.

	* legal name
	* parent agents
	* date of birth
	* date of death
	* child agents


(can Documents hold to the same criteria?)


	* URI
	* parent Documents
	* date of publication
	* date of withdrawal
	* back links

(maybe nice to one day support a feature to import an Evernote notebook)

(maybe a pseudonym agent will have just one "parent" back to the real person

<relations>
  <id type="parent, child, pseudo-nym-of, member-of-group">
</relations>

e.g.

<agent-id></agent-id> GUID? URI?
<name>David Bruce McFadzean</name>
<aliases>
     <agent>alias1</alias>
     <agent>alias2</alias>
     <agent>alias3</alias>
</aliases>
<d-o-b>1966.04.16</d-o-b>
<p-o-b>Edmonton, AB, Canada
<SIN></SIN>
<pubkey></pubkey>
<relations> and affiliations?
  <id-dad type="parent">
  <id-mother type="parent">
  <id-tracy type="spouse">
  <id-lucas type="child">
  <id-synaptive type="employer">
  <id-archetech type="group">
</relations>
<contact>
  <email></email>
  <phone></phone>
  <address></address>
</contact>

A program can infer other relations (e.g. siblings, parents-in-law) by following links

group agents may look like this

<relations>
  <uri>home page</uri>
  <id-parent-group type="parent">
  <id-member type="member1">
  <id-member type="member2">
  <id-member type="member3">
  <id-member type="member4">
</relations>

agents may always be merged, split, connected, disconnected by updating relation links
agents may always be corrected by updating values of links
e.g. (oops, the real bio father is someone else, agent gets married or divorced, or has a child)

The Org and System will try to ensure control of an xidb agent rests with the legal guardian

The Org reserves the right to revise an xidb in order to restore control to the legal owner
In effect the Org owns an agent's authentication credentials
Petitions and appeals will be handled by the process described in ArcheNomicon

When someone forks a group they can characterize the type of relation:

	* schism
	* subcomittee (added to subcommittee list)
	* member added
	* member removed

Does it go without saying that the agent-id (owner) owns the Agent document?
or maybe Agents may be owned by other agents

Eg group owned by one leader or deceased owned by estate

Each agent must have a canonical name

May also have aliases, former names, birth name

Each agent has a public key

Add credentials, degrees
Credentials are claimed by agents but verified by authority agents

Same with group membership

maybe agent ids should be hash of public key?

if someone loses control of their agent (private key is compromised) they can always
create a new agent and fork the old one at a revision before the compromise

then they have to convince all others to update their references to the new id (which could be costly)
but since it is possible, the System doesn't have to get involved in security breaches, it will be the responsibility of users

need to come up with a story that describes the process
e.g. 

group notices that one member is acting out of character
investigation shows that they recently changed their email address and password
notifies user through old email address, turns out they have been hacked
user creates new id by forking old one
user requests to rejoin group with application vote
new id voted in
group expels hacker with expel vote (majority or all-but-1 for almost-unanimous)
user informs System formally renouncing hacked ID
System or org verifies 
System informs authorities so they can update credential links






